// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 工数管理アプリケーション データモデル

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @db.VarChar(100)
  email     String?   @unique @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  projects    Project[]
  categories  Category[]
  tasks       Task[]
  timeEntries TimeEntry[]

  @@map("users")
}

model Project {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(200)
  description String?   @db.Text
  color       String    @default("#3498db") @db.VarChar(7)
  userId      String    @map("user_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz
  metadata    Json?     @default("{}") @db.JsonB

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("projects")
}

model Category {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(100)
  description String?   @db.Text
  color       String    @default("#e74c3c") @db.VarChar(7)
  userId      String    @map("user_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz
  metadata    Json?     @default("{}") @db.JsonB

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries TimeEntry[]

  @@map("categories")
}

model Task {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(200)
  description String?   @db.Text
  projectId   String    @map("project_id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz
  metadata    Json?     @default("{}") @db.JsonB

  // Relations
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries TimeEntry[]

  @@map("tasks")
}

model TimeEntry {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId     String   @map("task_id") @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  startTime  DateTime @map("start_time") @db.Timestamptz
  endTime    DateTime @map("end_time") @db.Timestamptz
  date       DateTime @db.Date
  memo       String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz

  // Relations
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}
